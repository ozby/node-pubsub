name: PR Feedback

on:
  pull_request:
    branches: [ main, master, develop ]

jobs:
  lint-feedback:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: 18
        cache: 'npm'

    - name: Get npm cache directory
      id: npm-cache-dir
      run: echo "dir=$(npm config get cache)" >> $GITHUB_OUTPUT

    - name: Cache node modules
      uses: actions/cache@v3
      id: npm-cache
      with:
        path: |
          ${{ steps.npm-cache-dir.outputs.dir }}
          **/node_modules
        key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-node-

    - name: Install Dependencies
      run: npm install

    - name: Lint
      run: npx lerna run lint --no-bail --concurrency=1 > lint-results.txt || true
      
    - name: Post Lint Results as Comment
      uses: actions/github-script@v6
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          let lintResults = '';
          try {
            lintResults = fs.readFileSync('lint-results.txt', 'utf8');
            // Truncate if too long
            if (lintResults.length > 65000) {
              lintResults = lintResults.substring(0, 65000) + '\n\n... (truncated)';
            }
          } catch (error) {
            lintResults = 'Error reading lint results: ' + error.message;
          }
          
          const body = `## Lint Results\n\`\`\`\n${lintResults}\n\`\`\``;
          
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => {
            return comment.user.type === 'Bot' && comment.body.includes('## Lint Results');
          });
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body,
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body,
            });
          } 